[{"/home/vimalvinod/Projects/React/robotics-website/src/index.tsx":"1","/home/vimalvinod/Projects/React/robotics-website/src/App.tsx":"2","/home/vimalvinod/Projects/React/robotics-website/src/pages/Contact.tsx":"3","/home/vimalvinod/Projects/React/robotics-website/src/components/Struct.tsx":"4","/home/vimalvinod/Projects/React/robotics-website/src/components/Header.tsx":"5","/home/vimalvinod/Projects/React/robotics-website/src/pages/Home.tsx":"6","/home/vimalvinod/Projects/React/robotics-website/src/pages/About.tsx":"7","/home/vimalvinod/Projects/React/robotics-website/src/components/Layout.tsx":"8","/home/vimalvinod/Projects/React/robotics-website/src/pages/Comment.tsx":"9","/home/vimalvinod/Projects/React/robotics-website/src/pages/Login.tsx":"10","/home/vimalvinod/Projects/React/robotics-website/src/components/Member.tsx":"11"},{"size":201,"mtime":1609413537391,"results":"12","hashOfConfig":"13"},{"size":682,"mtime":1609418062556,"results":"14","hashOfConfig":"13"},{"size":627,"mtime":1609372829150,"results":"15","hashOfConfig":"13"},{"size":797,"mtime":1609372829114,"results":"16","hashOfConfig":"13"},{"size":879,"mtime":1609372829038,"results":"17","hashOfConfig":"13"},{"size":1324,"mtime":1609415279595,"results":"18","hashOfConfig":"13"},{"size":4278,"mtime":1609444908628,"results":"19","hashOfConfig":"13"},{"size":224,"mtime":1609372829082,"results":"20","hashOfConfig":"13"},{"size":2615,"mtime":1609493537983,"results":"21","hashOfConfig":"13"},{"size":948,"mtime":1609372829170,"results":"22","hashOfConfig":"13"},{"size":389,"mtime":1609372829114,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"kny69c",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/vimalvinod/Projects/React/robotics-website/src/index.tsx",[],["52","53"],"/home/vimalvinod/Projects/React/robotics-website/src/App.tsx",[],["54","55"],"/home/vimalvinod/Projects/React/robotics-website/src/pages/Contact.tsx",[],["56","57"],"/home/vimalvinod/Projects/React/robotics-website/src/components/Struct.tsx",[],"/home/vimalvinod/Projects/React/robotics-website/src/components/Header.tsx",[],"/home/vimalvinod/Projects/React/robotics-website/src/pages/Home.tsx",[],["58","59"],"/home/vimalvinod/Projects/React/robotics-website/src/pages/About.tsx",[],["60","61"],"/home/vimalvinod/Projects/React/robotics-website/src/components/Layout.tsx",[],"/home/vimalvinod/Projects/React/robotics-website/src/pages/Comment.tsx",["62"],"import React, { ChangeEvent, useState } from \"react\";\nimport {\n  Alert,\n  InputGroup,\n  FormControl,\n  ListGroup,\n  Spinner,\n  Button,\n} from \"react-bootstrap\";\nimport { Layout } from \"../components/Layout\";\nimport { Struct } from \"../components/Struct\";\n\nconst fetchQuery = async (query: string, variables: {}): Promise<any> => {\n  const res = await fetch(\n    \"https://limitless-springs-67845.herokuapp.com/graphql\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: query,\n        variables: variables,\n      }),\n    }\n  );\n  return res.json();\n};\n\nconst fetchComments = async () => {\n  const data = await fetchQuery(\n    `\n    query {\n      comments {\n        _id\n        content\n      }\n    }\n  `,\n    {}\n  );\n  return data.data.comments;\n};\n\nconst postComment = async (content: string) => {\n  return await fetchQuery(\n    `\n    mutation ($content: String!) {\n      postComment(content: $content) {\n        content\n      }\n    }\n  `,\n    { content: content }\n  )\n    .then((res) => res.json())\n    .then((data) => console.log(data.data));\n};\n\ninterface ICommentState {\n  _id: string;\n  content: string;\n}\n\nexport const Comment: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [comments, setComments] = useState<ICommentState[]>(() => []);\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (event: ChangeEvent) => {\n    const target = event.target as HTMLTextAreaElement;\n    setValue(target.value);\n  };\n\n  const refreshComments = async () => {\n    const comments: ICommentState[] = await fetchComments();\n    setComments(comments);\n    setLoading(false);\n  };\n\n  refreshComments();\n\n  return (\n    <Layout>\n      <Alert variant=\"info\">This page is under Maintenence.</Alert>\n      <Struct title=\"The Comment Section\" importance={1}>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <Button variant=\"outline-secondary\">Button</Button>\n          </InputGroup.Prepend>\n          <FormControl\n            as=\"textarea\"\n            aria-label=\"With textarea\"\n            value={value}\n            onChange={handleChange}\n          />\n        </InputGroup>\n        {value}\n        <ListGroup>\n          {loading ? (\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n          ) : (\n            comments.map(({ _id, content }) => (\n              <ListGroup.Item key={_id}>{content}</ListGroup.Item>\n            ))\n          )}\n        </ListGroup>\n      </Struct>\n    </Layout>\n  );\n};\n","/home/vimalvinod/Projects/React/robotics-website/src/pages/Login.tsx",[],"/home/vimalvinod/Projects/React/robotics-website/src/components/Member.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"63","replacedBy":"67"},{"ruleId":"65","replacedBy":"68"},{"ruleId":"63","replacedBy":"69"},{"ruleId":"65","replacedBy":"70"},{"ruleId":"63","replacedBy":"71"},{"ruleId":"65","replacedBy":"72"},{"ruleId":"63","replacedBy":"73"},{"ruleId":"65","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":43,"column":7,"nodeType":"77","messageId":"78","endLine":43,"endColumn":18},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],["79"],["80"],["79"],["80"],["79"],["80"],["79"],["80"],"@typescript-eslint/no-unused-vars","'postComment' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]