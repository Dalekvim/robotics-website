{"version":3,"sources":["accessToken.ts","AuthContext.ts","components/Post.tsx","components/Blog.tsx","components/Header.tsx","components/Layout.tsx","components/Struct.tsx","pages/Home.tsx","pages/About.tsx","pages/Comment.tsx","components/Member.tsx","pages/Contact.tsx","pages/post/Create.tsx","pages/Error.tsx","pages/auth/Login.tsx","pages/auth/Register.tsx","pages/Profile.tsx","pages/post/Update.tsx","App.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","AuthContext","createContext","value","setValue","MEMBERS","gql","Post","_id","author","title","content","useQuery","loading","error","data","history","useHistory","Card","className","Header","as","members","map","member","firstName","lastName","Body","Title","Text","Button","variant","onClick","push","POSTS","Blog","posts","slice","reverse","useContext","Navbar","bg","expand","to","replace","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","Layout","children","Container","Struct","importance","renderTitle","Home","Alert","style","display","marginLeft","About","href","COMMENTS","CREATE_COMMENT","Comment","useMutation","createComment","useState","alert","setAlert","initialValues","onSubmit","a","setSubmitting","resetForm","variables","refetchQueries","query","isSubmitting","InputGroup","Prepend","type","disabled","placeholder","name","FormControl","Spinner","animation","role","message","comments","ListGroup","Item","Member","email","Subtitle","Contact","bio","CREATE_POST","CreatePost","createPost","values","handleChange","handleBlur","Form","Group","Control","controlId","rows","onChange","onBlur","Error","LOGIN","Login","login","password","Label","REGISTER","Register","register","confirmPassword","err","Row","Col","CURRENT_USER","UPDATE_BIO","Profile","updateBio","currentUser","UPDATE_POST","DELETE_POST","UpdatePost","updatePost","useParams","deletePost","post","reduce","acc","App","basename","Provider","exact","path","component","httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","client","ApolloClient","cache","InMemoryCache","link","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55f19932.chunk.js","sourcesContent":["let accessToken = \"\";\n\nexport const setAccessToken = (s: string) => {\n  accessToken = s;\n};\n\nexport const getAccessToken = () => {\n  return accessToken;\n};\n","import { createContext } from \"react\";\n\nexport const AuthContext = createContext<{ value: boolean; setValue: any }>({\n  value: false,\n  setValue: \"not set\",\n});\n","import { gql, useQuery } from \"@apollo/client\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface Props {\n  _id: string;\n  author: {\n    _id: string;\n  };\n  title: string;\n  content: string;\n}\n\nconst MEMBERS = gql`\n  query {\n    members {\n      _id\n      firstName\n      lastName\n    }\n  }\n`;\n\nexport const Post: React.FC<Props> = ({ _id, author, title, content }) => {\n  const { loading, error, data } = useQuery(MEMBERS);\n  const history = useHistory();\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>{error}</>;\n\n  return (\n    <Card className=\"mb-3\">\n      <Card.Header as=\"h5\">\n        {data.members.map(\n          (member: { _id: string; firstName: string; lastName: string }) =>\n            member._id === author._id\n              ? `By ${member.firstName} ${member.lastName}`\n              : null\n        )}\n      </Card.Header>\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n        <Card.Text>{content}</Card.Text>\n        <Button\n          variant=\"primary\"\n          onClick={() => history.push(`/post/update/${_id}`)}\n        >\n          Edit\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Post } from \"../components/Post\";\n\nconst POSTS = gql`\n  query {\n    posts {\n      _id\n      title\n      author {\n        _id\n      }\n      content\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\ninterface post {\n  _id: string;\n  title: string;\n  author: {\n    _id: string;\n  };\n  content: string;\n}\nexport const Blog: React.FC = () => {\n  const { loading, error, data } = useQuery<{ posts: post[] }>(POSTS);\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>{error}</>;\n  if (!data) return <>Could not fetch posts.</>;\n\n  return (\n    <>\n      {data.posts\n        .slice()\n        .reverse()\n        .map(({ _id, author, title, content }) => (\n          <Post\n            key={_id}\n            _id={_id}\n            author={author}\n            title={title}\n            content={content}\n          />\n        ))}\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Link } from \"react-router-dom\";\nimport { AuthContext } from \"../AuthContext\";\n\nexport const Header: React.FC = () => {\n  const { value } = useContext(AuthContext);\n\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Link to=\"/\" replace>\n        <Navbar.Brand>Robotics Club</Navbar.Brand>\n      </Link>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={Link} to=\"/about\" replace>\n            About\n          </Nav.Link>\n          <Nav.Link as={Link} to=\"/contact\" replace>\n            Contact Us\n          </Nav.Link>\n          <Nav.Link as={Link} to=\"/comment\" replace>\n            Comment\n          </Nav.Link>\n        </Nav>\n        <Nav>\n          {value ? (\n            <Nav.Link as={Link} to=\"/profile\" replace>\n              Profile\n            </Nav.Link>\n          ) : (\n            <>\n              <Nav.Link as={Link} to=\"/register\" replace>\n                Register\n              </Nav.Link>\n              <Nav.Link as={Link} to=\"/login\" replace>\n                Login\n              </Nav.Link>\n            </>\n          )}\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n","import { Container } from \"react-bootstrap\";\nimport { Header } from \"./Header\";\n\nexport const Layout: React.FC = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <Container>{children}</Container>\n    </>\n  );\n};\n","interface IStructProps {\n  title: string;\n  importance: number;\n}\nexport const Struct: React.FC<IStructProps> = ({\n  title,\n  importance,\n  children,\n}) => {\n  // The line below was just used to supress an error caused by the case the where the input to switch was out of bounds.\n  let renderTitle: JSX.Element = <></>;\n  switch (importance) {\n    case 1:\n      renderTitle = <h1>{title}</h1>;\n      break;\n    case 2:\n      renderTitle = <h2>{title}</h2>;\n      break;\n    case 3:\n      renderTitle = <h3>{title}</h3>;\n      break;\n    case 4:\n      renderTitle = <h4>{title}</h4>;\n      break;\n    case 5:\n      renderTitle = <h5>{title}</h5>;\n      break;\n    case 6:\n      renderTitle = <h6>{title}</h6>;\n      break;\n  }\n  return (\n    <>\n      {renderTitle}\n      {children}\n    </>\n  );\n};\n","import { useContext } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { AuthContext } from \"../AuthContext\";\nimport { Blog } from \"../components/Blog\";\nimport { Layout } from \"../components/Layout\";\nimport { Struct } from \"../components/Struct\";\n\nexport const Home: React.FC<RouteComponentProps> = ({ history }) => {\n  const { value } = useContext(AuthContext);\n\n  return (\n    <Layout>\n      <Alert variant=\"danger\">\n        There is no good way to say this, but the robotics club is currently\n        very low on members.\n      </Alert>\n      <Struct title=\"The Robotics Club Website\" importance={1}>\n        <p className=\"lead\">Welcome to the brand new Robotics Club Website!</p>\n        <div className=\"text-justify\">\n          <p>\n            There is no one in this club, other than Mahir of course, capable of\n            talking to actual humans, but if there were, he (let's be honest,\n            it's not going to be a she) would be actively be searching for new\n            members:\n          </p>\n          <p>\n            <b>\n              If you have nothing to do during Friday lunch, feel free to pop\n              by!\n            </b>\n          </p>\n        </div>\n        {value ? (\n          <div style={{ display: \"flex\" }}>\n            <Button\n              variant=\"primary\"\n              onClick={() => history.push(\"/post/create\")}\n              style={{ marginLeft: \"auto\" }}\n            >\n              New Post\n            </Button>\n          </div>\n        ) : null}\n        <hr />\n        <Blog />\n        <hr />\n        <Struct title=\"FAQs\" importance={2}>\n          <Struct title=\"When and where is it?\" importance={3}>\n            <p>\n              The Robotics Club is on <i>nearly</i> every friday in Mrs\n              Nemaura's Room (C1.1), which is just down the corridor from the\n              hub.\n            </p>\n          </Struct>\n        </Struct>\n      </Struct>\n    </Layout>\n  );\n};\n","import { Layout } from \"../components/Layout\";\nimport { Struct } from \"../components/Struct\";\n\nexport const About: React.FC = () => {\n  return (\n    <Layout>\n      <Struct title=\"About this Website\" importance={1}>\n        <div className=\"Intro\">\n          <div className=\"text-justify\">\n            <p>\n              This website was made using the MERN stack; that's MongoDB,\n              Express, React and Node.js. Just to be clear, I am by no means an\n              expert on any of these and am seriously looking for help with the\n              backend.\n            </p>\n            <p>\n              So, if you happen to have some free time on your hands and want to\n              contribute to the website, you can, but you have to join the\n              robotics club.\n            </p>\n            <Struct\n              title=\"Minimum requirements for a Frontend Developer:\"\n              importance={4}\n            >\n              <ul>\n                <li>Knows the basics of HTML</li>\n                <li>Knows/willing to learn React</li>\n              </ul>\n            </Struct>\n            <Struct\n              title=\"Minimum requirements for a Backend Developer:\"\n              importance={4}\n            >\n              <ul>\n                <li>Knows basic Javascript, preferrably ES6</li>\n                <li>Knows/willing to learn Node.js</li>\n              </ul>\n            </Struct>\n          </div>\n        </div>\n        <Struct title=\"Details\" importance={2}>\n          <div className=\"text-justify\">\n            <Struct title=\"Typescript\" importance={3}>\n              <p>\n                Typescript is an extension of Javascript that allows for types.\n                Any valid Javascript code is also Typescript code.\n              </p>\n              <p>\n                If you have only programmed in Python so far, or if you have not\n                programmed at all, you may wonder why I used Typescript.\n              </p>\n              <p>Are types that important?</p>\n              <p>\n                The answer to that question is yes. Although I haven't actually\n                used Vinalla Javascript enough to know how big the difference\n                is, I can see how knowing the types of things, and when they\n                don't match up, can save you tonnes of time.\n              </p>\n            </Struct>\n            <Struct title=\"Frontend\" importance={3}>\n              <p>\n                I just realised that most people don't really know what frontend\n                actually is - I mean, even though I talk big, I didn't know,\n                myself until I started making this.\n              </p>\n              <p>\n                <b>\n                  Basically, frontend is the stuff you guys see on this page.\n                </b>\n              </p>\n              <p>\n                The Frontend of this website was made using React which is a\n                Javascript library developed by Facebook.\n              </p>\n            </Struct>\n            <Struct title=\"Backend\" importance={3}>\n              <p>\n                I remember when I was first starting out trying to make an API,\n                I had no idea what I was doing because no one really had a good\n                definition of what an API was.\n              </p>\n              <p>\n                I'll try to explain what it is, but don't worry if you don't get\n                it right away.\n              </p>\n              <p>\n                <b>\n                  Basically, it's a page, or a bunch of pages with JSON on it.\n                </b>\n              </p>\n              <p>\n                The backend was created using Node.js and Express. Here is a\n                link to the API I created:{\" \"}\n                <a href=\"https://limitless-springs-67845.herokuapp.com\">\n                  limitless-springs\n                </a>\n                . It's a default name...\n              </p>\n            </Struct>\n            <Struct title=\"Database\" importance={3}>\n              <p>\n                I used the MongoDB database for this website, mostly because I\n                wanted to try out the MERN Stack.\n              </p>\n              <p>\n                The database is basically for storing data that you don't want\n                to lose when the user refreshes their browser, like comments.\n              </p>\n            </Struct>\n          </div>\n        </Struct>\n      </Struct>\n    </Layout>\n  );\n};\n","import React, { useState } from \"react\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { Field, Formik, Form } from \"formik\";\nimport {\n  Alert,\n  Button,\n  FormControl,\n  InputGroup,\n  ListGroup,\n  Spinner,\n} from \"react-bootstrap\";\nimport { Layout } from \"../components/Layout\";\nimport { Struct } from \"../components/Struct\";\n\nconst COMMENTS = gql`\n  query {\n    comments {\n      _id\n      content\n    }\n  }\n`;\n\nconst CREATE_COMMENT = gql`\n  mutation($content: String!) {\n    createComment(content: $content) {\n      _id\n      content\n    }\n  }\n`;\n\ninterface IComment {\n  _id: string;\n  content: string;\n}\n\nexport const Comment: React.FC = () => {\n  const { loading, error, data } = useQuery(COMMENTS);\n  const [createComment] = useMutation(CREATE_COMMENT);\n  const [alert, setAlert] = useState(<></>);\n\n  return (\n    <Layout>\n      {alert}\n      <Struct title=\"The Comment Section\" importance={1}>\n        <Formik\n          initialValues={{ content: \"\" }}\n          onSubmit={async ({ content }, { setSubmitting, resetForm }) => {\n            if (content) {\n              setAlert(<></>);\n              setSubmitting(true);\n              await createComment({\n                variables: { content: content },\n                refetchQueries: [{ query: COMMENTS }],\n              });\n              resetForm();\n              setSubmitting(false);\n            } else {\n              setAlert(\n                <Alert variant=\"warning\">\n                  You can't post an empty comment.\n                </Alert>\n              );\n            }\n          }}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <Button\n                    variant=\"outline-secondary\"\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                  >\n                    Post\n                  </Button>\n                </InputGroup.Prepend>\n                <Field\n                  placeholder=\"Comment...\"\n                  name=\"content\"\n                  type=\"input\"\n                  as={FormControl}\n                />\n              </InputGroup>\n            </Form>\n          )}\n        </Formik>\n        {loading ? (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        ) : error ? (\n          `Error! ${error.message}`\n        ) : (\n          data.comments\n            .slice()\n            .reverse()\n            .map(({ _id, content }: IComment) => (\n              <ListGroup.Item key={_id}>{content}</ListGroup.Item>\n            ))\n        )}\n      </Struct>\n    </Layout>\n  );\n};\n","import { Card } from \"react-bootstrap\";\n\ninterface IMemberProps {\n  name: string;\n  email: string;\n}\n\nexport const Member: React.FC<IMemberProps> = ({ name, email, children }) => {\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{name}</Card.Title>\n        <Card.Subtitle>{email}</Card.Subtitle>\n        <Card.Text>{children}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Layout } from \"../components/Layout\";\nimport { Member } from \"../components/Member\";\n\nconst MEMBERS = gql`\n  query {\n    members {\n      _id\n      firstName\n      lastName\n      email\n      bio\n    }\n  }\n`;\n\ninterface member {\n  _id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  bio: string;\n}\n\nexport const Contact: React.FC = () => {\n  const { loading, error, data } = useQuery(MEMBERS);\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>{error}</>;\n\n  return (\n    <Layout>\n      <h1>Contact Us</h1>\n      <div>\n        {data.members.map((member: member) => (\n          <Member\n            key={member._id}\n            name={`${member.firstName} ${member.lastName}`}\n            email={member.email}\n          >\n            {member.bio}\n          </Member>\n        ))}\n      </div>\n    </Layout>\n  );\n};\n","import { gql, useMutation } from \"@apollo/client\";\nimport { Field, Formik, Form as FForm } from \"formik\";\nimport { useContext, useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { setAccessToken } from \"../../accessToken\";\nimport { AuthContext } from \"../../AuthContext\";\nimport { Layout } from \"../../components/Layout\";\nimport { Struct } from \"../../components/Struct\";\n\nconst POSTS = gql`\n  query {\n    posts {\n      _id\n      title\n      author {\n        _id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst CREATE_POST = gql`\n  mutation($title: String!, $content: String!) {\n    createPost(title: $title, content: $content)\n  }\n`;\n\nexport const CreatePost: React.FC<RouteComponentProps> = ({ history }) => {\n  const [createPost] = useMutation(CREATE_POST);\n  const [alert, setAlert] = useState(<></>);\n  const { setValue } = useContext(AuthContext);\n\n  return (\n    <Layout>\n      {alert}\n      <Struct title=\"Create Post\" importance={1}>\n        <Formik\n          initialValues={{ title: \"\", content: \"\" }}\n          onSubmit={async ({ title, content }, { setSubmitting }) => {\n            if (title && content) {\n              setAlert(<></>);\n              setSubmitting(true);\n              try {\n                await createPost({\n                  variables: { title: title, content: content },\n                  refetchQueries: [{ query: POSTS }],\n                });\n                history.push(\"/\");\n              } catch {\n                setAccessToken(\"\");\n                setValue(false);\n                setAlert(\n                  <Alert variant=\"warning\">You are not authenticated.</Alert>\n                );\n              }\n              setSubmitting(false);\n            } else {\n              setAlert(\n                <Alert variant=\"warning\">\n                  You can't post an empty comment.\n                </Alert>\n              );\n            }\n          }}\n        >\n          {({ values, isSubmitting, handleChange, handleBlur }) => (\n            <FForm>\n              <Form.Group>\n                <Field\n                  placeholder=\"Title...\"\n                  name=\"title\"\n                  type=\"input\"\n                  as={Form.Control}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control\n                  name=\"content\"\n                  placeholder=\"Content...\"\n                  as=\"textarea\"\n                  rows={3}\n                  value={values.content}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n              </Form.Group>\n              <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                Post\n              </Button>\n            </FForm>\n          )}\n        </Formik>\n      </Struct>\n    </Layout>\n  );\n};\n","import Alert from \"react-bootstrap/Alert\";\nimport { Layout } from \"../components/Layout\";\n\nexport const Error: React.FC = () => {\n  return (\n    <Layout>\n      <Alert variant=\"warning\">404 page not found</Alert>\n    </Layout>\n  );\n};\n","import { Field, Formik, Form as FForm } from \"formik\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { Layout } from \"../../components/Layout\";\nimport { Struct } from \"../../components/Struct\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useContext, useState } from \"react\";\nimport { setAccessToken } from \"../../accessToken\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { AuthContext } from \"../../AuthContext\";\n\nconst LOGIN = gql`\n  mutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      accessToken\n    }\n  }\n`;\n\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\n  const [login] = useMutation(LOGIN);\n  const [alert, setAlert] = useState(<></>);\n  const { setValue } = useContext(AuthContext);\n\n  return (\n    <Layout>\n      {alert}\n      <Struct title=\"Login Page\" importance={1}>\n        <Formik\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={async ({ email, password }, { setSubmitting }) => {\n            setSubmitting(true);\n            try {\n              const { data } = await login({ variables: { email, password } });\n              setAccessToken(data!.login.accessToken);\n              setValue(true);\n              setAlert(\n                <Alert variant=\"success\">Logged in successfully.</Alert>\n              );\n              history.push(\"/profile\");\n            } catch (err) {\n              setAlert(<Alert variant=\"warning\">{err.message}</Alert>);\n            }\n            setSubmitting(false);\n          }}\n        >\n          {({ isSubmitting }) => (\n            <FForm>\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  as={Form.Control}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  as={Form.Control}\n                />\n              </Form.Group>\n              <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </Button>\n            </FForm>\n          )}\n        </Formik>\n      </Struct>\n    </Layout>\n  );\n};\n","import { gql, useMutation } from \"@apollo/client\";\nimport { Formik, Form as FForm, Field } from \"formik\";\nimport { useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Layout } from \"../../components/Layout\";\nimport { Struct } from \"../../components/Struct\";\n\nconst REGISTER = gql`\n  mutation(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    register(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    )\n  }\n`;\n\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\n  const [register] = useMutation(REGISTER);\n  const [alert, setAlert] = useState(<></>);\n\n  return (\n    <Layout>\n      {alert}\n      <Struct title=\"Register Page\" importance={1}>\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          onSubmit={async (\n            { firstName, lastName, email, password, confirmPassword },\n            { setSubmitting }\n          ) => {\n            let err = true;\n\n            if (!firstName || !lastName || !email || !password) {\n              setAlert(\n                <Alert variant=\"warning\">Empty fields are not allowed.</Alert>\n              );\n            } else if (password !== confirmPassword) {\n              setAlert(\n                <Alert variant=\"warning\">Passwords do not match!</Alert>\n              );\n            } else {\n              setAlert(<></>);\n              err = false;\n            }\n\n            if (!err) {\n              setSubmitting(true);\n              const { data } = await register({\n                variables: { firstName, lastName, email, password },\n              });\n              if (data.register) {\n                setAlert(\n                  <Alert variant=\"success\">\n                    Successfully created your account!\n                  </Alert>\n                );\n                history.push(\"/login\");\n              } else {\n                setAlert(<Alert variant=\"warning\">That email is taken.</Alert>);\n              }\n              setSubmitting(false);\n            }\n          }}\n        >\n          {({ isSubmitting }) => (\n            <FForm>\n              <Form.Group>\n                <Form.Label>Name</Form.Label>\n                <Row>\n                  <Col>\n                    <Field\n                      name=\"firstName\"\n                      type=\"input\"\n                      placeholder=\"First name\"\n                      as={Form.Control}\n                    />\n                  </Col>\n                  <Col>\n                    <Field\n                      name=\"lastName\"\n                      type=\"input\"\n                      placeholder=\"Last name\"\n                      as={Form.Control}\n                    />\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  as={Form.Control}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  as={Form.Control}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicConfirmPassword\">\n                <Form.Label>Confirm Password</Form.Label>\n                <Field\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  as={Form.Control}\n                />\n              </Form.Group>\n              <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </Button>\n            </FForm>\n          )}\n        </Formik>\n      </Struct>\n    </Layout>\n  );\n};\n","import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { Formik, Form as FForm } from \"formik\";\nimport { useContext, useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { AuthContext } from \"../AuthContext\";\nimport { Layout } from \"../components/Layout\";\nimport { Struct } from \"../components/Struct\";\n\nconst CURRENT_USER = gql`\n  {\n    currentUser {\n      _id\n      email\n      firstName\n      lastName\n      bio\n    }\n  }\n`;\n\nconst UPDATE_BIO = gql`\n  mutation($bio: String!) {\n    updateBio(bio: $bio)\n  }\n`;\n\nexport const Profile: React.FC = () => {\n  const { loading, error, data } = useQuery(CURRENT_USER);\n  const [alert, setAlert] = useState(<></>);\n  const [updateBio] = useMutation(UPDATE_BIO);\n  const { setValue } = useContext(AuthContext);\n\n  if (loading || error) {\n    return (\n      <Layout>\n        {loading ? (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        ) : error ? (\n          <>\n            <Alert variant=\"warning\">{error.message}</Alert>\n            {setValue(false)}\n          </>\n        ) : null}\n      </Layout>\n    );\n  }\n\n  const { firstName, lastName, bio } = data.currentUser;\n\n  return (\n    <Layout>\n      {alert}\n      <Struct title=\"Profile Page\" importance={1}>\n        <Struct title={`You are ${firstName} ${lastName}!`} importance={2}>\n          <Struct title=\"Bio\" importance={3}>\n            <Formik\n              initialValues={{ bio: bio }}\n              onSubmit={async ({ bio }, { setSubmitting }) => {\n                setSubmitting(true);\n                try {\n                  const { data } = await updateBio({\n                    variables: { bio },\n                    refetchQueries: [{ query: CURRENT_USER }],\n                  });\n                  if (data.updateBio) {\n                    setAlert(\n                      <Alert variant=\"success\">Your bio was updated!</Alert>\n                    );\n                  } else {\n                    setAlert(\n                      <Alert variant=\"danger\">That did not work!</Alert>\n                    );\n                  }\n                } catch (err) {\n                  setAlert(<Alert variant=\"warning\">{err.message}</Alert>);\n                  setValue(false);\n                }\n                setSubmitting(false);\n              }}\n            >\n              {({ values, isSubmitting, handleChange, handleBlur }) => (\n                <FForm>\n                  <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Control\n                      name=\"bio\"\n                      placeholder=\"About me...\"\n                      as=\"textarea\"\n                      rows={3}\n                      value={values.bio}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                    />\n                  </Form.Group>\n                  <Button\n                    variant=\"primary\"\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                  >\n                    Update\n                  </Button>\n                </FForm>\n              )}\n            </Formik>\n          </Struct>\n        </Struct>\n      </Struct>\n    </Layout>\n  );\n};\n","import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { Field, Formik, Form as FForm } from \"formik\";\nimport { useContext, useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { setAccessToken } from \"../../accessToken\";\nimport { AuthContext } from \"../../AuthContext\";\nimport { Layout } from \"../../components/Layout\";\nimport { Struct } from \"../../components/Struct\";\n\nconst POSTS = gql`\n  query {\n    posts {\n      _id\n      title\n      author {\n        _id\n      }\n      content\n    }\n  }\n`;\n\nconst UPDATE_POST = gql`\n  mutation($_id: String!, $title: String!, $content: String!) {\n    updatePost(_id: $_id, title: $title, content: $content)\n  }\n`;\n\nconst DELETE_POST = gql`\n  mutation($_id: String!) {\n    deletePost(_id: $_id)\n  }\n`;\n\ninterface post {\n  _id: string;\n  title: string;\n  author: any;\n  content: string;\n}\n\nexport const UpdatePost: React.FC = () => {\n  const [updatePost] = useMutation(UPDATE_POST);\n  const [alert, setAlert] = useState(<></>);\n  const { setValue } = useContext(AuthContext);\n  const { loading, error, data } = useQuery(POSTS);\n  const history = useHistory();\n  const { _id } = useParams<{ _id: string }>();\n  const [deletePost] = useMutation(DELETE_POST);\n\n  if (loading) return <>Loading...</>;\n  if (error) return <>{error}</>;\n\n  const post: { title: string; content: string } = data.posts.reduce(\n    (acc: post, post: post) => (post._id === _id ? post : acc),\n    { title: \"\", content: \"\" }\n  );\n\n  return (\n    <Layout>\n      {alert}\n      <Struct title=\"Update Post\" importance={1}>\n        <Formik\n          initialValues={{ title: post.title, content: post.content }}\n          onSubmit={async ({ title, content }, { setSubmitting }) => {\n            if (title && content) {\n              setAlert(<></>);\n              setSubmitting(true);\n              try {\n                await updatePost({\n                  variables: {\n                    _id: _id,\n                    title: title,\n                    content: content,\n                  },\n                  refetchQueries: [{ query: POSTS }],\n                });\n                history.push(\"/\");\n              } catch {\n                setAccessToken(\"\");\n                setValue(false);\n                setAlert(\n                  <Alert variant=\"warning\">You are not authenticated.</Alert>\n                );\n              }\n              setSubmitting(false);\n            } else {\n              setAlert(\n                <Alert variant=\"warning\">\n                  You can't post an empty comment.\n                </Alert>\n              );\n            }\n          }}\n        >\n          {({ values, isSubmitting, handleChange, handleBlur }) => (\n            <FForm>\n              <Form.Group>\n                <Field\n                  placeholder=\"Title...\"\n                  name=\"title\"\n                  type=\"input\"\n                  as={Form.Control}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control\n                  name=\"content\"\n                  placeholder=\"Content...\"\n                  as=\"textarea\"\n                  rows={3}\n                  value={values.content}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n              </Form.Group>\n              <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                Update\n              </Button>\n              <Button\n                className=\"float-right\"\n                variant=\"danger\"\n                onClick={async () => {\n                  try {\n                    await deletePost({\n                      variables: { _id: _id },\n                      refetchQueries: [{ query: POSTS }],\n                    });\n                    history.push(\"/\");\n                  } catch (error) {\n                    setAlert(<Alert variant=\"warning\">{error.message}</Alert>);\n                  }\n                }}\n              >\n                Delete\n              </Button>\n            </FForm>\n          )}\n        </Formik>\n      </Struct>\n    </Layout>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Home } from \"./pages/Home\";\nimport { About } from \"./pages/About\";\nimport { Comment } from \"./pages/Comment\";\nimport { Contact } from \"./pages/Contact\";\nimport { CreatePost } from \"./pages/post/Create\";\nimport { Error } from \"./pages/Error\";\nimport { Login } from \"./pages/auth/Login\";\nimport { Register } from \"./pages/auth/Register\";\nimport { Profile } from \"./pages/Profile\";\nimport { AuthContext } from \"./AuthContext\";\nimport { UpdatePost } from \"./pages/post/Update\";\n\nexport const App: React.FC = () => {\n  const [value, setValue] = useState(false);\n\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <AuthContext.Provider value={{ value, setValue }}>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/comment\" component={Comment} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/post/create\" component={CreatePost} />\n          <Route path=\"/post/update/:_id\" component={UpdatePost} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/login\" component={Login} />\n        </AuthContext.Provider>\n        <Route path=\"/\" component={Error} />\n      </Switch>\n    </HashRouter>\n  );\n};\n","import {\n  ApolloClient,\n  ApolloLink,\n  ApolloProvider,\n  concat,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\n\nconst httpLink = new HttpLink({\n  uri: \"https://limitless-springs-67845.herokuapp.com/graphql\",\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  operation.setContext({\n    headers: {\n      authorization: getAccessToken() ? `bearer ${getAccessToken()}` : \"\",\n    },\n  });\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: concat(authMiddleware, httpLink),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}